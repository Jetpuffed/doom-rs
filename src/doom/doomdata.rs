//! Original file: doomdata.h
//! 
//! Description: All external data is defined here. Most of the data is loaded
//! into different structures at run time. Some internal structures shared by
//! many modules are here.

#![allow(overflowing_literals)]

// Some global defines, that configure the game.
use super::doomdef::*;

// The most basic types we use, portability.
use super::doomtype::*;

//
// Map level types. The following data structures define the persistent
// format used in the lumps of the WAD files.
//

/*
    Original has an undefined enum that seemingly is never referenced.
    For reference in case it actually means something, it starts on line 43.
*/

// A single vertex.
pub struct MapVertex
{
    x: i16,
    y: i16,
}

// A SideDef, defining the visual appearance of a wall, by setting textures and offsets.
pub struct MapSideDef
{
    texture_offset: i16,
    row_offset: i16,
    top_texture: [u8; 8],
    bottom_texture: [u8; 8],
    mid_texture: [u8; 8],

    // Front sector, towards viewer.
    sector: i16,
}

pub struct MapLineDef
{
    v1: i16,
    v2: i16,
    flags: i16,
    special: i16,
    tag: i16,

    // sidenum[1] will be -1 if one sided
    side_num: [i16; 2],
}

//
// LineDef attributes.
//

// Solid, is an obstacle.
pub const ML_BLOCKING: i32 = 1;

// Blocks monsters only.
pub const ML_BLOCK_MONSTERS: i32 = 2;

// Backside will not be present at all if not two sided.
pub const ML_TWO_SIDED: i32 = 4;

// If a texture is pegged, the texture will have the end exposed to air held constant at
// the top or bottom of the texture (stairs or pulled down things) and will move with a height
// change of one of the neighbor sectors. Unpegged textures always have the first row of the
// texture at the top pixel of the line for both top and bottom textures (use next to windows).

// Upper texture unpegged
pub const ML_DONT_PEG_TOP: i32 = 8;

// Lower texture unpegged
pub const ML_DONT_PEG_BOTTOM: i32 = 16;

// In AutoMap: don't map as two sided: IT'S A SECRET!
pub const ML_SECRET: i32 = 32;

// Sound rendering: don't let sound cross two of these.
pub const ML_SOUND_BLOCK: i32 = 64;

// Don't draw on the automap at all.
pub const ML_DONT_DRAW: i32 = 128;

// Set if already seen, thus drawn in automap.
pub const ML_MAPPED: i32 = 256;

// Sector definition, from editing.
pub struct MapSector
{
    floor_height: i16,
    ceiling_height: i16,
    floor_pic: [u8; 8],
    ceiling_pic: [u8; 8],
    light_level: i16,
    special: i16,
    tag: i16,
}

// SubSector, as generated by BSP.
pub struct MapSubSector
{
    num_segs: i16,
    first_seg: i16,
}

// LineSeg, generated by splitting LineDefs using partition lines selected by BSP builder.
pub struct MapSeg
{
    v1: i16,
    v2: i16,
    angle: i16,
    line_def: i16,
    side: i16,
    offset: i16,
}

// BSP node structure.

// Indicate a leaf.
pub const NF_SUBSECTOR: i16 = 0x8000;

pub struct MapNode
{
    // Partition line from (x, y) to (x + dx, y + dy)
    x: i16,
    y: i16,
    dx: i16,
    dy: i16,
    
    // Bounding box for each child, clip against view frustum.
    b_box: [[i16; 4]; 2],

    // If NF_SUBSECTOR it's a subsector, else it's a node of another subtree.
    children: [u16; 2],
}

// Thing definition, position, orientation, and type, plus skill/visibility flags and attributes.
pub struct MapThing
{
    x: i16,
    y: i16,
    angle: i16,
    r#type: i16,
    options: i16,
}
